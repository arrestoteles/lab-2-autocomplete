/******************************************************************************
** Lab 2: Autocomplete
******************************************************************************/

Group members:
- Armin Balesic
- Shariq Shahbaz
- Victor Campanello

/******************************************************************************
** 1. Describe how your firstIndexOf() method in RangeBinarySearch.java
**    finds the first index of a key that equals the search key.
******************************************************************************/

We initialize three variables, high which stores the highest index of the array, low which stores the lowest index and
currentMatch which is intialized with -1. Then we initiate a while loop to run while the low index is less than or
equal to the high index. We calculate the middle of the array based on the high and low values and store it in a
variable. We then compare the value stored at the middle index with the key using the compare method of the comparator
and store the result in a variable to avoid repeated method calls. If the key is equal to the value at mid, we store
the value of mid in currentMatch equal to the value of mid and reset high to mid-1. This allows us to continue the loop
so we can search leftwards for an earlier instance of key (and we don't just return the index of the first match like
a normal binarysearch. If the value at mid is greater than the key, i.e key is to the  left of the mid,
we reset high to mid-1 and continue the loop. If the key is greater than the value at mid, i.e key is to the right of
mid, we reset low to mid+1 and continue the loop. When the while loop condiditon is no longer true, i.e when we have an
array of size one we break out of the loop. Then we return currentMatch which either stores the first index of key or
-1 if the key was not found in the array.

/******************************************************************************
** 2. State and justify the asymptotic complexity of the operations
**    in the Autocomplete class in the dictionary size n.
**    For all Matches and numberOfMatches, the asymptotic complexity
**    should also depend on the matching terms m.
**
**    You may take the number of comparisons as a proxy for the runtime.
******************************************************************************/

sortDictionary: O(N log N), where N is the size of the dictionary array

sortDictionary uses Arrays.sort to sort the array, which has the complexity of N log N

numberOfMatches: O(log N), where N is the size of the dictionary array

numberOfMatches uses our modified binary search twice to find the number of matches, which has the asymptotic
complexity of log N (doing the binary search twice does not influence the asymptotic complexity of the method).

allMatches: O(log N M log M), where N is the size of the array and M is the number of matches

allMatches uses binary search twice to find the number of matches, which has the complexity of log N. Then it uses
Arrays.sort to sort the array of matches, which has the complexity of M log M. (Other operations such as
Arrays.copyRangeOf() can be ignored as they do not influence the asymptotic complexity of the method).

/******************************************************************************
** Appendix: General information
**
** A. Approximately how many hours did you spend on the assignment?
******************************************************************************/

- Armin Balesic: 8 hours
- Shariq Shahbaz 8.5 hours
- Victor Campanello 8.5 hours

/******************************************************************************
** B. Are there any known bugs / limitations?
******************************************************************************/

No

/******************************************************************************
** C. Did you collaborate with any other students on this lab?
**    If so, please write in what way you collaborated and with whom.
**    Also include any resources (including the web) that you may
**    may have used in creating your design.
******************************************************************************/

No

/******************************************************************************
** D. Describe any serious problems you encountered.                    
******************************************************************************/

N/A

/******************************************************************************
** E. List any other comments here.
**    Feel free to provide any feedback on how much you learned 
**    from doing the assignment, and whether you enjoyed it.                                             
******************************************************************************/

N/A
